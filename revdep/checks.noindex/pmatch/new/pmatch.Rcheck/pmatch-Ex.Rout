
R version 3.5.1 (2018-07-02) -- "Feather Spray"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "pmatch"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('pmatch')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("case_func")
> ### * case_func
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: case_func
> ### Title: Creates a pattern matching function.
> ### Aliases: case_func
> 
> ### ** Examples
> 
> linked_list := NIL | CONS(car, cdr : linked_list)
> lst <- CONS(1, CONS(2, CONS(3, NIL)))
> len <- case_func(acc = 0,
+    NIL -> acc,
+    CONS(car,cdr) -> len(cdr, acc + 1)
+ )
> len(lst)
[1] 3
> 
> list_sum <- case_func(acc = 0,
+    NIL -> acc,
+    CONS(car,cdr) -> list_sum(cdr, acc + car)
+ )
> list_sum(lst)
[1] 6
> 
> tuples := ..(first, second) | ...(first, second, third)
> f <- case_func(..(.,.) -> 2, ...(.,.,.) -> 3)
> f(..(1, 2))
[1] 2
> f(...(1, 2, 3))
[1] 3
> 
> 
> 
> 
> cleanEx()
> nameEx("cases")
> ### * cases
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cases
> ### Title: Dispatches from an expression to a matching pattern
> ### Aliases: cases
> 
> ### ** Examples
> 
> linked_list := NIL | CONS(car, cdr : linked_list)
> lst <- CONS(1, CONS(2, CONS(3, NIL)))
> len <- function(lst, acc = 0) {
+     cases(lst,
+           NIL -> acc,
+           CONS(car,cdr) -> len(cdr, acc + 1))
+ }
> len(lst)
[1] 3
> 
> list_sum <- function(lst, acc = 0) {
+     cases(lst,
+           NIL -> acc,
+           CONS(car,cdr) -> list_sum(cdr, acc + car))
+ }
> list_sum(lst)
[1] 6
> 
> 
> 
> 
> cleanEx()
> nameEx("cases_expr")
> ### * cases_expr
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cases_expr_
> ### Title: Create an expression that tests patterns against an expression
> ###   in turn
> ### Aliases: cases_expr_ cases_expr
> 
> ### ** Examples
> 
> linked_list := NIL | CONS(car, cdr : linked_list)
> 
> length_body <- cases_expr(
+                   lst,
+                   NIL -> acc,
+                   CONS(car, cdr) -> ll_length(cdr, acc + 1))
> length_body
if (!rlang::is_null(..match_env <- pmatch::test_pattern(lst, 
    NIL))) with(..match_env, acc) else if (!rlang::is_null(..match_env <- pmatch::test_pattern(lst, 
    CONS(car, cdr)))) with(..match_env, ll_length(cdr, acc + 
    1))
> 
> ll_length <- rlang::new_function(alist(lst=, acc = 0), length_body)
> ll_length(CONS(1, CONS(2, CONS(3, CONS(4, NIL)))))
[1] 4
> 
> 
> 
> 
> cleanEx()
> nameEx("colon-equals")
> ### * colon-equals
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: :=
> ### Title: Define a new data type from a sequence of constructors.
> ### Aliases: :=
> 
> ### ** Examples
> 
> linked_list := NIL | CONS(car, cdr : linked_list)
> lst <- CONS(1, CONS(2, CONS(3, NIL)))
> len <- function(lst, acc = 0) {
+     cases(lst,
+           NIL -> acc,
+           CONS(car,cdr) -> len(cdr, acc + 1))
+ }
> len(lst)
[1] 3
> 
> list_sum <- function(lst, acc = 0) {
+     cases(lst,
+           NIL -> acc,
+           CONS(car,cdr) -> list_sum(cdr, acc + car))
+ }
> list_sum(lst)
[1] 6
> 
> 
> 
> 
> cleanEx()
> nameEx("dotdot")
> ### * dotdot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ..
> ### Title: Function for specifying a sequence of patterns/expressions
> ### Aliases: ..
> 
> ### ** Examples
> 
> llist := NIL | CONS(car, cdr : llist)
> compare_llists <- function(l1, l2) {
+     cases(..(l1, l2),
+           ..(NIL, NIL) -> TRUE,
+           ..(NIL, .)   -> FALSE,
+           ..(., NIL)   -> FALSE,
+           ..(CONS(car1,cdr1), CONS(car2,cdr2)) ->
+               car1 == car2 && compare_llists(cdr1, cdr2)
+           )
+ }
> compare_llists(NIL, NIL)
[1] TRUE
> compare_llists(CONS(1, NIL), CONS(1, NIL))
[1] TRUE
> compare_llists(CONS(1, NIL), NIL)
[1] FALSE
> compare_llists(CONS(1, NIL), CONS(2, NIL))
[1] FALSE
> 
> 
> 
> 
> cleanEx()
> nameEx("subset-.pmatch_bind")
> ### * subset-.pmatch_bind
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: [<-.pmatch_bind
> ### Title: Bind variables to pattern-matched expressions.
> ### Aliases: [<-.pmatch_bind
> 
> ### ** Examples
> 
> bind[x, y] <- c(2,4)
> x == 2
[1] TRUE
> y == 4
[1] TRUE
> 
> llist := NIL | CONS(car, cdr : llist)
> L <- CONS(1, CONS(2, CONS(3, NIL)))
> bind[CONS(first, CONS(second, rest))] <- L
> first == 1
[1] TRUE
> second == 2
[1] TRUE
> 
> 
> 
> 
> cleanEx()
> nameEx("test_pattern")
> ### * test_pattern
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: test_pattern_
> ### Title: Test if a pattern matches an expression
> ### Aliases: test_pattern_ test_pattern
> 
> ### ** Examples
> 
> type := ZERO | ONE(x) | TWO(x,y)
> zero <- ZERO
> one <- ONE(1)
> two <- TWO(1,2)
> 
> as.list(test_pattern(zero, ZERO)) # returns an empty binding
list()
> test_pattern_(one, quote(ZERO)) # returns NULL
NULL
> as.list(test_pattern_(one, quote(ONE(v)))) # returns a binding for v
$v
[1] 1

> as.list(test_pattern(two, TWO(v,w))) # returns a binding for v and w
$v
[1] 1

$w
[1] 2

> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.623 0.031 0.661 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
